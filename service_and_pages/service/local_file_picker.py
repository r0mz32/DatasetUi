from pathlib import Path
from typing import Optional

from nicegui import events, ui


class local_file_picker(ui.dialog):

    def __init__(self, directory: str, *,
                 upper_limit: Optional[str] = ..., multiple: bool = False, show_hidden_files: bool = False, chose_yaml: bool = False) -> None:
        """Local File Picker

        –ü—Ä–æ—Å—Ç–æ–π –¥–∏–∞–ª–æ–≥ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã, –≥–¥–µ —Ä–∞–±–æ—Ç–∞–µ—Ç NiceGUI.

        :param directory: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤—ã–±–æ—Ä.
        :param upper_limit: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è, –≤—ã—à–µ –∫–æ—Ç–æ—Ä–æ–π –Ω–µ–ª—å–∑—è –ø–æ–¥–Ω–∏–º–∞—Ç—å—Å—è (None: –Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–∞ –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è, —á—Ç–æ –∏ –Ω–∞—á–∞–ª—å–Ω–∞—è).
        :param multiple: –ü–æ–∑–≤–æ–ª—è–µ—Ç –ª–∏ –≤—ã–±–∏—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤.
        :param show_hidden_files: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ —Å–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã.
        :param chose_yaml: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ —Ç–æ–ª—å–∫–æ .yaml —Ñ–∞–π–ª—ã –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏–ª–∏ —Ç–æ–ª—å–∫–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.
        """
        super().__init__()

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∏ –≤–µ—Ä—Ö–Ω–∏–π –ø—Ä–µ–¥–µ–ª (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
        self.path = Path(directory).expanduser()
        if upper_limit is None:
            self.upper_limit = None
        else:
            self.upper_limit = Path(
                directory if upper_limit == ... else upper_limit).expanduser()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–ª–∞–≥–∏ –ø–æ–∫–∞–∑–∞ —Å–∫—Ä—ã—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ yaml
        self.show_hidden_files = show_hidden_files
        self.chose_yaml = chose_yaml  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ chose_yaml

        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å —Ç–∞–±–ª–∏—Ü–µ–π –∏ –∫–Ω–æ–ø–∫–∞–º–∏ "Cancel" –∏ "Ok"
        with self, ui.card():
            self.grid = ui.aggrid({
                'columnDefs': [{'field': 'name', 'headerName': self.get_shortened_path()}],
                'rowSelection': 'multiple' if multiple else 'single',
            }, html_columns=[0]).classes('w-96').on('cellDoubleClicked', self.handle_double_click)
            with ui.row().classes('w-full justify-end'):
                ui.button('Cancel', on_click=self.close).props('outline')
                ui.button('Ok', on_click=self._handle_ok)
        self.update_grid()

    def get_shortened_path(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–∫–æ—Ä–æ—á–µ–Ω–Ω—ã–π –ø—É—Ç—å, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π."""
        path_str = str(self.path)
        max_length = 50  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—É—Ç–∏
        if len(path_str) > max_length:
            parts = self.path.parts
            while len(str(Path(*parts))) > max_length and len(parts) > 1:
                parts = parts[1:]
            return f'..{Path(*parts)}'
        return path_str

    def update_drive(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ –¥–∏—Å–∫–∞."""
        self.path = Path(self.drives_toggle.value).expanduser()
        self.update_grid()

    def update_grid(self) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ç–∞–±–ª–∏—Ü—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø—É—Ç–∏."""
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ –ø—É—Ç–∏
        self.grid.options['columnDefs'][0]['headerName'] = self.get_shortened_path()

        paths = list(self.path.glob('*'))

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–∫—Ä—ã—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ —Ñ–ª–∞–≥ show_hidden_files –≤—ã–∫–ª—é—á–µ–Ω
        if not self.show_hidden_files:
            paths = [p for p in paths if not p.name.startswith('.')]

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ chose_yaml
        if self.chose_yaml:
            # –ï—Å–ª–∏ chose_yaml = True, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–ø–∫–∏ –∏ .yaml —Ñ–∞–π–ª—ã
            paths = [p for p in paths if p.is_dir() or (
                p.is_file() and p.suffix == '.yaml')]
        else:
            # –ï—Å–ª–∏ chose_yaml = False, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–∞–ø–∫–∏
            paths = [p for p in paths if p.is_dir()]

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –ø–∞–ø–∫–∏, –∑–∞—Ç–µ–º —Ñ–∞–π–ª—ã
        paths.sort(key=lambda p: p.name.lower())
        paths.sort(key=lambda p: not p.is_dir())

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫
        self.grid.options['rowData'] = [
            {
                'name': f'üìÅ <strong>{p.name}</strong>' if p.is_dir() else p.name,
                'path': str(p),
            }
            for p in paths
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
        if self.upper_limit is None and self.path != self.path.parent or \
                self.upper_limit is not None and self.path != self.upper_limit:
            self.grid.options['rowData'].insert(0, {
                'name': 'üìÅ <strong>..</strong>',
                'path': str(self.path.parent),
            })

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.grid.update()

    def handle_double_click(self, e: events.GenericEventArguments) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ —â–µ–ª—á–∫–∞ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É —Ç–∞–±–ª–∏—Ü—ã."""
        self.path = Path(e.args['data']['path'])
        if self.path.is_dir():
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å ‚Äî –ø–∞–ø–∫–∞, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —ç—Ç–æ–π –ø–∞–ø–∫–∏
            self.update_grid()
        else:
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ñ–∞–π–ª, –ø–µ—Ä–µ–¥–∞–µ–º –µ–≥–æ –ø—É—Ç—å
            self.submit([str(self.path)])

    async def _handle_ok(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ Ok ‚Äî –≤—ã–±–æ—Ä —Ñ–∞–π–ª–∞/—Ñ–∞–π–ª–æ–≤."""
        rows = await self.grid.get_selected_rows()
        self.submit([r['path'] for r in rows])
